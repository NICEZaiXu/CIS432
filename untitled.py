import os
import pandas as pd
import numpy as np
import streamlit as st
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score

##########################################
# 1. хдЪшпншиАцФпцМБчЪДщЕНч╜о
##########################################
language_options = {
    "English": {
        "title": "ЁЯПж Credit Risk Prediction App",
        "description": "Enter applicant details to predict loan approval or rejection.",
        "external_risk": "External Risk Estimate",
        "msince_oldest_trade": "Months Since Oldest Trade",
        "msince_most_recent_trade": "Months Since Most Recent Trade",
        "average_m_in_file": "Average Months in File",
        "num_satisfactory_trades": "Number of Satisfactory Trades",
        "num_trades_60_ever": "Num Trades 60+ Ever",
        "num_trades_90_ever": "Num Trades 90+ Ever",
        "percent_trades_never_delq": "Percent of Trades Never Delinquent",
        "msince_most_recent_delq": "Months Since Most Recent Delinquency",
        "max_delq_12m": "Max Delinquency in Last 12M",
        "max_delq_ever": "Max Delinquency Ever",
        "num_total_trades": "Number of Total Trades",
        "num_trades_open_12m": "Num Trades Open in Last 12M",
        "percent_install_trades": "Percent Installment Trades",
        "msince_most_recent_inq": "Months Since Most Recent Inquiry",
        "num_inq_last_6m": "Num Inquiries Last 6M",
        "num_inq_last_6m_excl7": "Num Inquiries Last 6M Excl 7 Days",
        "net_fraction_revolving_burden": "Net Fraction Revolving Burden",
        "net_fraction_install_burden": "Net Fraction Install Burden",
        "num_revolving_trades_balance": "Num Revolving Trades With Balance",
        "num_install_trades_balance": "Num Install Trades With Balance",
        "num_bank_natl_trades_high_util": "Num Bank/National Trades High Utilization",
        "percent_trades_balance": "Percent Trades With Balance",
        "model_selection": "Select Model",
        "predict_button": "Predict Credit Risk",
        "approved": "тЬЕ Approved",
        "rejected": "тЭМ Rejected",
        "rejection_reason": "Rejection Reasons",
        "train_button": "Train/Reload Models"
    },
    "ф╕нцЦЗ": {
        "title": "ЁЯПж ф┐бчФищгОщЩйщвДц╡Лх║ФчФи",
        "description": "шп╖ш╛УхЕечФ│шп╖ф║║ф┐бцБпф╗ещвДц╡Лш┤╖цм╛цЙ╣хЗЖцИЦцЛТч╗ЭуАВ",
        "external_risk": "хдЦщГищгОщЩйшпДф╝░",
        "msince_oldest_trade": "ш╖ЭцЬАцЧйф║дцШУцЬИф╗╜",
        "msince_most_recent_trade": "ш╖ЭцЬАш┐Сф║дцШУцЬИф╗╜",
        "average_m_in_file": "цЦЗф╗╢ф╕нчЪДх╣│хЭЗцЬИф╗╜цХ░",
        "num_satisfactory_trades": "ц╗бцДПф║дцШУцХ░",
        "num_trades_60_ever": "60+хдйф║дцШУцХ░",
        "num_trades_90_ever": "90+хдйф║дцШУцХ░",
        "percent_trades_never_delq": "ф╗ОцЬкщА╛цЬЯф║дцШУчЩ╛хИЖцпФ",
        "msince_most_recent_delq": "ш╖ЭцЬАш┐СщА╛цЬЯцЬИф╗╜",
        "max_delq_12m": "ш┐С12ф╕кцЬИцЬАхдзщА╛цЬЯ",
        "max_delq_ever": "хОЖхП▓цЬАхдзщА╛цЬЯ",
        "num_total_trades": "цА╗ф║дцШУцХ░",
        "num_trades_open_12m": "ш┐С12ф╕кцЬИх╝АхРпф║дцШУцХ░",
        "percent_install_trades": "хИЖцЬЯф║дцШУчЩ╛хИЖцпФ",
        "msince_most_recent_inq": "ш╖ЭцЬАш┐СшпвщЧоцЬИф╗╜",
        "num_inq_last_6m": "ш┐С6ф╕кцЬИшпвщЧоцХ░",
        "num_inq_last_6m_excl7": "ш┐С6ф╕кцЬИцОТщЩд7хдйшпвщЧоцХ░",
        "net_fraction_revolving_burden": "х╛кчОпш┤ЯхА║цпФф╛Л",
        "net_fraction_install_burden": "хИЖцЬЯш┤ЯхА║цпФф╛Л",
        "num_revolving_trades_balance": "цЬЙф╜ЩщвЭх╛кчОпф║дцШУцХ░",
        "num_install_trades_balance": "цЬЙф╜ЩщвЭхИЖцЬЯф║дцШУцХ░",
        "num_bank_natl_trades_high_util": "щУ╢шбМ/хЕихЫ╜щлШхИйчФичОЗф║дцШУцХ░",
        "percent_trades_balance": "цЬЙф╜ЩщвЭф║дцШУчЩ╛хИЖцпФ",
        "model_selection": "щАЙцЛйцибхЮЛ",
        "predict_button": "щвДц╡Лф┐бчФищгОщЩй",
        "approved": "тЬЕ цЙ╣хЗЖ",
        "rejected": "тЭМ цЛТч╗Э",
        "rejection_reason": "цЛТч╗ЭхОЯхЫа",
        "train_button": "шонч╗Г/щЗНцЦ░хКаш╜╜цибхЮЛ"
    },
    "эХЬъ╡ньЦ┤": {
        "title": "ЁЯПж ьЛаьЪй ьЬДэЧШ ьШИь╕б ьХ▒",
        "description": "ыМАь╢Ь ьК╣ьЭ╕ ыШРыКФ ъ▒░ы╢Аые╝ ьШИь╕бэХШъ╕░ ьЬДэХ┤ ьЛаь▓ньЮР ьаХы│┤ые╝ ьЮЕыаеэХШьД╕ьЪФ.",
        "external_risk": "ьЩ╕ы╢А ьЬДэЧШ эПЙъ░А",
        "msince_oldest_trade": "ъ░АьЮе ьШдыЮШыРЬ ъ▒░ыЮШ ьЭ┤эЫД ъ░ЬьЫФ ьИШ",
        "msince_most_recent_trade": "ъ░АьЮе ь╡Ьъ╖╝ ъ▒░ыЮШ ьЭ┤эЫД ъ░ЬьЫФ ьИШ",
        "average_m_in_file": "эММьЭ╝ьЭШ эПЙъ╖а ъ░ЬьЫФ ьИШ",
        "num_satisfactory_trades": "ызМьб▒ьКдыЯмьЪ┤ ъ▒░ыЮШ ьИШ",
        "num_trades_60_ever": "60ьЭ╝ ьЭ┤ьГБ ъ▒░ыЮШ ьИШ",
        "num_trades_90_ever": "90ьЭ╝ ьЭ┤ьГБ ъ▒░ыЮШ ьИШ",
        "percent_trades_never_delq": "ьЧ░ь▓┤ ьЧЖыКФ ъ▒░ыЮШ ы╣ДьЬи",
        "msince_most_recent_delq": "ъ░АьЮе ь╡Ьъ╖╝ ьЧ░ь▓┤ ьЭ┤эЫД ъ░ЬьЫФ ьИШ",
        "max_delq_12m": "ь╡Ьъ╖╝ 12ъ░ЬьЫФ ь╡ЬыМА ьЧ░ь▓┤",
        "max_delq_ever": "ьЧныМА ь╡ЬыМА ьЧ░ь▓┤",
        "num_total_trades": "ь┤Э ъ▒░ыЮШ ьИШ",
        "num_trades_open_12m": "ь╡Ьъ╖╝ 12ъ░ЬьЫФ ъ░ЬьЛЬ ъ▒░ыЮШ ьИШ",
        "percent_install_trades": "эХаы╢А ъ▒░ыЮШ ы╣ДьЬи",
        "msince_most_recent_inq": "ъ░АьЮе ь╡Ьъ╖╝ ым╕ьЭШ ьЭ┤эЫД ъ░ЬьЫФ ьИШ",
        "num_inq_last_6m": "ь╡Ьъ╖╝ 6ъ░ЬьЫФ ым╕ьЭШ ьИШ",
        "num_inq_last_6m_excl7": "ь╡Ьъ╖╝ 6ъ░ЬьЫФ 7ьЭ╝ ьаЬьЩ╕ ым╕ьЭШ ьИШ",
        "net_fraction_revolving_burden": "эЪМьаД ы╢АыЛ┤ ы╣ДьЬи",
        "net_fraction_install_burden": "эХаы╢А ы╢АыЛ┤ ы╣ДьЬи",
        "num_revolving_trades_balance": "ьЮФьХб ьЮИыКФ эЪМьаД ъ▒░ыЮШ ьИШ",
        "num_install_trades_balance": "ьЮФьХб ьЮИыКФ эХаы╢А ъ▒░ыЮШ ьИШ",
        "num_bank_natl_trades_high_util": "ьЭАэЦЙ/ьаДъ╡н ъ│аэЩЬьЪй ъ▒░ыЮШ ьИШ",
        "percent_trades_balance": "ьЮФьХб ъ▒░ыЮШ ы╣ДьЬи",
        "model_selection": "ыкиыН╕ ьДаэГЭ",
        "predict_button": "ьЛаьЪй ьЬДэЧШ ьШИь╕б",
        "approved": "тЬЕ ьК╣ьЭ╕ыРи",
        "rejected": "тЭМ ъ▒░ы╢АыРи",
        "rejection_reason": "ъ▒░ы╢А ьВмьЬа",
        "train_button": "ыкиыН╕ эХЩьК╡/ьЮмыбЬыУЬ"
    },
    "рд╣рд┐рдВрджреА": {
        "title": "ЁЯПж рдХреНрд░реЗрдбрд┐рдЯ рдЬреЛрдЦрд┐рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдРрдк",
        "description": "рдХреГрдкрдпрд╛ рдЛрдг рд╕реНрд╡реАрдХреГрддрд┐ рдпрд╛ рдЕрд╕реНрд╡реАрдХреГрддрд┐ рдХреЗ рд▓рд┐рдП рдЖрд╡реЗрджрдирдХрд░реНрддрд╛ рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВред",
        "external_risk": "рдмрд╛рд╣рд░реА рдЬреЛрдЦрд┐рдо рдЖрдХрд▓рди",
        "msince_oldest_trade": "рд╕рдмрд╕реЗ рдкреБрд░рд╛рдиреЗ рд╡реНрдпрд╛рдкрд╛рд░ рд╕реЗ рдорд╣реАрдиреЗ",
        "msince_most_recent_trade": "рд╕рдмрд╕реЗ рд╣рд╛рд▓ рдХреЗ рд╡реНрдпрд╛рдкрд╛рд░ рд╕реЗ рдорд╣реАрдиреЗ",
        "average_m_in_file": "рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рдФрд╕рдд рдорд╣реАрдиреЗ",
        "num_satisfactory_trades": "рд╕рдВрддреЛрд╖рдЬрдирдХ рд╡реНрдпрд╛рдкрд╛рд░ рдХреА рд╕рдВрдЦреНрдпрд╛",
        "num_trades_60_ever": "60+ рджрд┐рдиреЛрдВ рдХреЗ рд╡реНрдпрд╛рдкрд╛рд░",
        "num_trades_90_ever": "90+ рджрд┐рдиреЛрдВ рдХреЗ рд╡реНрдпрд╛рдкрд╛рд░",
        "percent_trades_never_delq": "рдХрднреА рдбрд┐рдлрд╝реЙрд▓реНрдЯ рди рд╣реЛрдиреЗ рд╡рд╛рд▓реЗ рд╡реНрдпрд╛рдкрд╛рд░ рдХрд╛ рдкреНрд░рддрд┐рд╢рдд",
        "msince_most_recent_delq": "рд╕рдмрд╕реЗ рд╣рд╛рд▓ рдХреЗ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд╕реЗ рдорд╣реАрдиреЗ",
        "max_delq_12m": "рдкрд┐рдЫрд▓реЗ 12 рдорд╣реАрдиреЛрдВ рдореЗрдВ рдЕрдзрд┐рдХрддрдо рдбрд┐рдлрд╝реЙрд▓реНрдЯ",
        "max_delq_ever": "рдЕрдм рддрдХ рдХрд╛ рдЕрдзрд┐рдХрддрдо рдбрд┐рдлрд╝реЙрд▓реНрдЯ",
        "num_total_trades": "рдХреБрд▓ рд╡реНрдпрд╛рдкрд╛рд░реЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛",
        "num_trades_open_12m": "рдкрд┐рдЫрд▓реЗ 12 рдорд╣реАрдиреЛрдВ рдореЗрдВ рдЦреБрд▓реЗ рд╡реНрдпрд╛рдкрд╛рд░",
        "percent_install_trades": "рдХрд┐рд╕реНрдд рд╡реНрдпрд╛рдкрд╛рд░ рдХрд╛ рдкреНрд░рддрд┐рд╢рдд",
        "msince_most_recent_inq": "рд╕рдмрд╕реЗ рд╣рд╛рд▓ рдХреЗ рдкреВрдЫрддрд╛рдЫ рд╕реЗ рдорд╣реАрдиреЗ",
        "num_inq_last_6m": "рдкрд┐рдЫрд▓реЗ 6 рдорд╣реАрдиреЛрдВ рдореЗрдВ рдкреВрдЫрддрд╛рдЫ",
        "num_inq_last_6m_excl7": "рдкрд┐рдЫрд▓реЗ 6 рдорд╣реАрдиреЛрдВ рдореЗрдВ 7 рджрд┐рдиреЛрдВ рдХреЛ рдЫреЛрдбрд╝рдХрд░ рдкреВрдЫрддрд╛рдЫ",
        "net_fraction_revolving_burden": "рд░рд┐рд╡реЙрд▓реНрд╡рд┐рдВрдЧ рдмрд░реНрдбрди рдХрд╛ рдкреНрд░рддрд┐рд╢рдд",
        "net_fraction_install_burden": "рдХрд┐рд╕реНрдд рдмрд░реНрдбрди рдХрд╛ рдкреНрд░рддрд┐рд╢рдд",
        "num_revolving_trades_balance": "рдмреИрд▓реЗрдВрд╕ рд╡рд╛рд▓реЗ рд░рд┐рд╡реЙрд▓реНрд╡рд┐рдВрдЧ рд╡реНрдпрд╛рдкрд╛рд░",
        "num_install_trades_balance": "рдмреИрд▓реЗрдВрд╕ рд╡рд╛рд▓реЗ рдХрд┐рд╕реНрдд рд╡реНрдпрд╛рдкрд╛рд░",
        "num_bank_natl_trades_high_util": "рдЙрдЪреНрдЪ рдЙрдкрдпреЛрдЧ рд╡рд╛рд▓реЗ рдмреИрдВрдХ/рд░рд╛рд╖реНрдЯреНрд░реАрдп рд╡реНрдпрд╛рдкрд╛рд░",
        "percent_trades_balance": "рдмреИрд▓реЗрдВрд╕ рд╡рд╛рд▓реЗ рд╡реНрдпрд╛рдкрд╛рд░ рдХрд╛ рдкреНрд░рддрд┐рд╢рдд",
        "model_selection": "рдореЙрдбрд▓ рдЪреБрдиреЗрдВ",
        "predict_button": "рдХреНрд░реЗрдбрд┐рдЯ рдЬреЛрдЦрд┐рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        "approved": "тЬЕ рд╕реНрд╡реАрдХреГрдд",
        "rejected": "тЭМ рдЕрд╕реНрд╡реАрдХреГрдд",
        "rejection_reason": "рдЕрд╕реНрд╡реАрдХреГрддрд┐ рдХреЗ рдХрд╛рд░рдг",
        "train_button": "рдореЙрдбрд▓ рдЯреНрд░реЗрди/рд░реАрд▓реЛрдб"
    }
}

# ф╛зш╛╣цаПщАЙцЛйшпншиА
selected_language = st.sidebar.selectbox("Select Language / щАЙцЛйшпншиА / ьЦ╕ьЦ┤ ьДаэГЭ / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ", list(language_options.keys()))
lang = language_options[selected_language]

##########################################
# 2. цибхЮЛшонч╗ГхЗ╜цХ░я╝ИхРлцХ░цНоц╕Ец┤ЧуАБхИЖхЙ▓уАБцаЗхЗЖхМЦуАБцибхЮЛшонч╗Гф╕ОшпДф╝░я╝Й
##########################################
@st.cache(allow_output_mutation=True)
def train_models():
    # шп╗хПЦцХ░цНо
    df = pd.read_csv("/Users/lizaixu/Desktop/heloc_dataset_v1.csv")
    # х░ЖчЫоцаЗхПШщЗПш╜мцНвф╕║цХ░хА╝я╝ИGood:1, Bad:0я╝Й
    df["RiskPerformance"] = df["RiskPerformance"].map({"Good": 1, "Bad": 0})
    # х░ЖчЙ╣цоКхА╝цЫ┐цНвф╕║ NaN
    special_values_list = [-9, -8, -7]
    df.replace(special_values_list, np.nan, inplace=True)
    # хИащЩдч╝║хд▒хА╝ш┐ЗхдЪчЪДхИЧя╝Иф╛ЛхжВш╢Еш┐З 40% чЪДч╝║хд▒я╝Й
    threshold = 0.4 * len(df)
    df_cleaned = df.dropna(thresh=threshold, axis=1)
    # хп╣цХ░хА╝хЮЛхПШщЗПф╜┐чФиф╕нф╜НцХ░хблхЕЕч╝║хд▒хА╝
    for col in df_cleaned.columns:
        if df_cleaned[col].dtype in ["float64", "int64"]:
            df_cleaned[col].fillna(df_cleaned[col].median(), inplace=True)
    # хИйчФи IQR цЦ╣ц│ХхдДчРЖх╝Вх╕╕хА╝
    Q1 = df_cleaned.quantile(0.25)
    Q3 = df_cleaned.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    for col in df_cleaned.columns:
        if df_cleaned[col].dtype in ["float64", "int64"]:
            df_cleaned[col] = np.where((df_cleaned[col] < lower_bound[col]) | (df_cleaned[col] > upper_bound[col]),
                                       np.nan, df_cleaned[col])
            df_cleaned[col].fillna(df_cleaned[col].median(), inplace=True)
    # хИЖчж╗чЙ╣х╛БхТМчЫоцаЗхПШщЗП
    y = df_cleaned["RiskPerformance"]
    X = df_cleaned.drop(columns=["RiskPerformance"])
    # хИТхИЖшонч╗ГщЫЖхТМц╡ЛшпХщЫЖ
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y)
    # щТИхп╣ Logistic Regression хТМ SVM ш┐ЫшбМцХ░цНоцаЗхЗЖхМЦ
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    # хИЭхзЛхМЦхРДцибхЮЛ
    models = {
        "Logistic Regression": LogisticRegression(),
        "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
        "Decision Tree": DecisionTreeClassifier(random_state=42),
        "Gradient Boosting": GradientBoostingClassifier(n_estimators=100, random_state=42),
        "SVM": SVC(probability=True, random_state=42)
    }
    model_performance = {}
    # шонч╗ГцибхЮЛх╣╢шпДф╝░
    for name, model in models.items():
        if name in ["Logistic Regression", "SVM"]:
            model.fit(X_train_scaled, y_train)
            y_pred = model.predict(X_test_scaled)
            y_pred_prob = model.predict_proba(X_test_scaled)[:, 1]
        else:
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)
            y_pred_prob = model.predict_proba(X_test)[:, 1]
        accuracy = accuracy_score(y_test, y_pred)
        auc = roc_auc_score(y_test, y_pred_prob)
        report = classification_report(y_test, y_pred, output_dict=True)
        model_performance[name] = {
            "Accuracy": accuracy,
            "ROC-AUC": auc,
            "Classification Report": report
        }
    # ф┐ЭхнШшонч╗ГцЧ╢ф╜┐чФичЪДчЙ╣х╛Бщб║х║П
    feature_names = X.columns.tolist()
    return models, scaler, model_performance, feature_names

##########################################
# 3. цибхЮЛшонч╗Гя╝ИчВ╣хЗ╗цМЙщТошзжхПСя╝ЙхПКх▒Хчд║шпДф╝░ч╗УцЮЬ
##########################################
st.sidebar.header("Model Training")
if st.sidebar.button(lang["train_button"]):
    st.session_state["trained"] = False  # х╝║хИ╢щЗНцЦ░шонч╗Г

if "trained" not in st.session_state or not st.session_state["trained"]:
    with st.spinner("Training models..."):
        models, scaler, model_performance, feature_names = train_models()
        st.session_state["models"] = models
        st.session_state["scaler"] = scaler
        st.session_state["feature_names"] = feature_names
        st.session_state["model_performance"] = model_performance
        st.session_state["trained"] = True
    st.success("Models trained successfully!")

with st.expander("View Model Performance Metrics"):
    for m, metrics in st.session_state["model_performance"].items():
        st.write(f"**{m}**")
        st.write(f"Accuracy: {metrics['Accuracy']:.4f}, ROC-AUC: {metrics['ROC-AUC']:.4f}")
        st.write("Classification Report:")
        st.write(pd.DataFrame(metrics["Classification Report"]).transpose())

##########################################
# 4. Streamlit х║ФчФищвДц╡ЛщГихИЖ
##########################################
st.title(lang["title"])
st.write(lang["description"])

st.sidebar.header(lang["model_selection"])
# цЙЛхКиш╛УхЕехПВцХ░я╝Иф╜┐чФи number_inputя╝Й
external_risk = st.sidebar.number_input(lang["external_risk"], min_value=0, max_value=100, value=50)
msince_oldest_trade = st.sidebar.number_input(lang["msince_oldest_trade"], min_value=0, max_value=500, value=100)
msince_most_recent_trade = st.sidebar.number_input(lang["msince_most_recent_trade"], min_value=0, max_value=100, value=10)
average_m_in_file = st.sidebar.number_input(lang["average_m_in_file"], min_value=0, max_value=200, value=50)
num_satisfactory_trades = st.sidebar.number_input(lang["num_satisfactory_trades"], min_value=0, max_value=50, value=15)
num_trades_60_ever = st.sidebar.number_input(lang["num_trades_60_ever"], min_value=0, max_value=20, value=5)
num_trades_90_ever = st.sidebar.number_input(lang["num_trades_90_ever"], min_value=0, max_value=20, value=5)
percent_trades_never_delq = st.sidebar.number_input(lang["percent_trades_never_delq"], min_value=0, max_value=100, value=80)
msince_most_recent_delq = st.sidebar.number_input(lang["msince_most_recent_delq"], min_value=0, max_value=100, value=10)
max_delq_12m = st.sidebar.number_input(lang["max_delq_12m"], min_value=0, max_value=10, value=5)
max_delq_ever = st.sidebar.number_input(lang["max_delq_ever"], min_value=0, max_value=10, value=5)
num_total_trades = st.sidebar.number_input(lang["num_total_trades"], min_value=0, max_value=50, value=10)
num_trades_open_12m = st.sidebar.number_input(lang["num_trades_open_12m"], min_value=0, max_value=20, value=5)
percent_install_trades = st.sidebar.number_input(lang["percent_install_trades"], min_value=0, max_value=100, value=50)
msince_most_recent_inq = st.sidebar.number_input(lang["msince_most_recent_inq"], min_value=0, max_value=100, value=10)
num_inq_last_6m = st.sidebar.number_input(lang["num_inq_last_6m"], min_value=0, max_value=20, value=2)
num_inq_last_6m_excl7 = st.sidebar.number_input(lang["num_inq_last_6m_excl7"], min_value=0, max_value=20, value=2)
net_fraction_revolving_burden = st.sidebar.number_input(lang["net_fraction_revolving_burden"], min_value=0, max_value=100, value=50)
net_fraction_install_burden = st.sidebar.number_input(lang["net_fraction_install_burden"], min_value=0, max_value=100, value=50)
num_revolving_trades_balance = st.sidebar.number_input(lang["num_revolving_trades_balance"], min_value=0, max_value=20, value=5)
num_install_trades_balance = st.sidebar.number_input(lang["num_install_trades_balance"], min_value=0, max_value=20, value=5)
num_bank_natl_trades_high_util = st.sidebar.number_input(lang["num_bank_natl_trades_high_util"], min_value=0, max_value=20, value=5)
percent_trades_balance = st.sidebar.number_input(lang["percent_trades_balance"], min_value=0, max_value=100, value=50)

# цибхЮЛщАЙцЛй
model_choice = st.sidebar.radio(lang["model_selection"], list(st.session_state["models"].keys()))

# хоЪф╣ЙцЛТч╗ЭхОЯхЫачФЯцИРхЗ╜цХ░я╝Ичд║ф╛ЛщА╗ш╛Ся╝МхПпца╣цНощЬАшжБцЙйх▒Хя╝Й
def get_rejection_reasons(data):
    reasons = []
    if data["ExternalRiskEstimate"].iloc[0] > 70:
        reasons.append(lang["external_risk"] + " is too high.")
    if data["NumSatisfactoryTrades"].iloc[0] < 10:
        reasons.append(lang["num_satisfactory_trades"] + " is too low.")
    if not reasons:
        reasons.append("The input parameters did not trigger any specific rejection criteria.")
    return reasons

# хоЪф╣ЙщвДц╡ЛхЗ╜цХ░
def make_prediction():
    # цЮДщАаш╛УхЕе DataFrameя╝Ичбоф┐ЭчЙ╣х╛Бщб║х║Пф╕Ошонч╗ГцЧ╢ф╕АшЗ┤я╝Й
    input_data = pd.DataFrame({
        "ExternalRiskEstimate": [external_risk],
        "MSinceOldestTradeOpen": [msince_oldest_trade],
        "MSinceMostRecentTradeOpen": [msince_most_recent_trade],
        "AverageMInFile": [average_m_in_file],
        "NumSatisfactoryTrades": [num_satisfactory_trades],
        "NumTrades60Ever2DerogPubRec": [num_trades_60_ever],
        "NumTrades90Ever2DerogPubRec": [num_trades_90_ever],
        "PercentTradesNeverDelq": [percent_trades_never_delq],
        "MSinceMostRecentDelq": [msince_most_recent_delq],
        "MaxDelq2PublicRecLast12M": [max_delq_12m],
        "MaxDelqEver": [max_delq_ever],
        "NumTotalTrades": [num_total_trades],
        "NumTradesOpeninLast12M": [num_trades_open_12m],
        "PercentInstallTrades": [percent_install_trades],
        "MSinceMostRecentInqexcl7days": [msince_most_recent_inq],
        "NumInqLast6M": [num_inq_last_6m],
        "NumInqLast6Mexcl7days": [num_inq_last_6m_excl7],
        "NetFractionRevolvingBurden": [net_fraction_revolving_burden],
        "NetFractionInstallBurden": [net_fraction_install_burden],
        "NumRevolvingTradesWBalance": [num_revolving_trades_balance],
        "NumInstallTradesWBalance": [num_install_trades_balance],
        "NumBank2NatlTradesWHighUtilization": [num_bank_natl_trades_high_util],
        "PercentTradesWBalance": [percent_trades_balance]
    })
    input_data = input_data[st.session_state["feature_names"]]
    # хп╣ Logistic Regression хТМ SVM ш┐ЫшбМцаЗхЗЖхМЦхдДчРЖ
    if model_choice in ["Logistic Regression", "SVM"]:
        input_data_transformed = st.session_state["scaler"].transform(input_data)
    else:
        input_data_transformed = input_data
    selected_model = st.session_state["models"][model_choice]
    prediction = selected_model.predict(input_data_transformed)[0]
    st.session_state["prediction"] = prediction
    if prediction == 0:
        reasons = get_rejection_reasons(input_data)
        st.session_state["rejection_reasons"] = reasons
    else:
        st.session_state["rejection_reasons"] = None

# чВ╣хЗ╗цМЙщТошзжхПСщвДц╡Л
if st.button(lang["predict_button"]):
    make_prediction()

# цШ╛чд║щвДц╡Лч╗УцЮЬф╕ОцЛТч╗ЭхОЯхЫая╝ИхжВщАВчФия╝Й
if "prediction" in st.session_state and st.session_state["prediction"] is not None:
    if st.session_state["prediction"] == 1:
        st.write(f"### {lang['approved']}")
    else:
        st.write(f"### {lang['rejected']}")
        if st.session_state["rejection_reasons"]:
            st.write("#### " + lang["rejection_reason"] + ":")
            for reason in st.session_state["rejection_reasons"]:
                st.write("- " + reason)