import os
import pandas as pd
import numpy as np
import joblib
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score

# =============================================================================
# цибхЮЛшонч╗ГщГихИЖя╝Ъшонч╗ГцЙАцЬЙцибхЮЛх╣╢ф┐ЭхнШ
# =============================================================================
def train_all_models():
    # шп╗хПЦцХ░цНо
    df = pd.read_csv("heloc_dataset_v1.csv")
    
    # х░ЖчЫоцаЗхПШщЗПш╜мцНвф╕║цХ░хА╝я╝ЪGood ф╕║ 1я╝МBad ф╕║ 0
    df["RiskPerformance"] = df["RiskPerformance"].map({"Good": 1, "Bad": 0})
    
    # х░ЖчЙ╣цоКхА╝(-9, -8, -7)цЫ┐цНвф╕║ NaN
    special_values_list = [-9, -8, -7]
    df.replace(special_values_list, np.nan, inplace=True)
    
    # хИащЩдч╝║хд▒хА╝ш┐ЗхдЪчЪДхИЧя╝Иш╢Еш┐З 40% чЪДч╝║хд▒хА╝я╝Й
    threshold = 0.4 * len(df)
    df_cleaned = df.dropna(thresh=threshold, axis=1)
    
    # хп╣цХ░хА╝хЮЛчЙ╣х╛БчФиф╕нф╜НцХ░хблхЕЕч╝║хд▒хА╝
    for col in df_cleaned.columns:
        if df_cleaned[col].dtype in ["float64", "int64"]:
            df_cleaned[col].fillna(df_cleaned[col].median(), inplace=True)
    
    # ф╜┐чФи IQR цЦ╣ц│ХцгАц╡Лх╝Вх╕╕хА╝я╝Мх╣╢х░Жш╢ЕхЗ║ш╛╣чХМчЪДхА╝цЫ┐цНвф╕║ NaNя╝МхЖНчФиф╕нф╜НцХ░хблхЕЕ
    Q1 = df_cleaned.quantile(0.25)
    Q3 = df_cleaned.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    for col in df_cleaned.columns:
        if df_cleaned[col].dtype in ["float64", "int64"]:
            df_cleaned[col] = np.where((df_cleaned[col] < lower_bound[col]) | (df_cleaned[col] > upper_bound[col]),
                                       np.nan, df_cleaned[col])
            df_cleaned[col].fillna(df_cleaned[col].median(), inplace=True)
    
    # хИЖчж╗чЙ╣х╛БхТМчЫоцаЗхПШщЗП
    y = df_cleaned["RiskPerformance"]
    X = df_cleaned.drop(columns=["RiskPerformance"])
    
    # хИТхИЖшонч╗ГщЫЖхТМц╡ЛшпХщЫЖя╝И80% шонч╗Гя╝М20% ц╡ЛшпХя╝МхИЖх▒ВцК╜ца╖я╝Й
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
    
    # хп╣ф║О Logistic Regression хТМ SVM ф╜┐чФицаЗхЗЖхМЦцХ░цНо
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    # хоЪф╣ЙцЙАцЬЙцибхЮЛ
    models = {
        "Logistic Regression": LogisticRegression(),
        "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
        "Decision Tree": DecisionTreeClassifier(random_state=42),
        "Gradient Boosting": GradientBoostingClassifier(n_estimators=100, random_state=42),
        "SVM": SVC(probability=True, random_state=42)
    }
    
    # шонч╗ГцЙАцЬЙцибхЮЛх╣╢шпДф╝░я╝ИшпДф╝░ч╗УцЮЬф╗Еф╜ЬхПВшАГя╝Й
    for name, model in models.items():
        if name in ["Logistic Regression", "SVM"]:
            model.fit(X_train_scaled, y_train)
            y_pred = model.predict(X_test_scaled)
        else:
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        print(f"{name} Accuracy: {accuracy:.4f}")
    
    # ф┐ЭхнШцЙАцЬЙцибхЮЛ
    joblib.dump(models["Logistic Regression"], "logistic_regression.pkl")
    joblib.dump(models["Random Forest"], "random_forest.pkl")
    joblib.dump(models["Decision Tree"], "decision_tree.pkl")
    joblib.dump(models["Gradient Boosting"], "gradient_boosting.pkl")
    joblib.dump(models["SVM"], "svm.pkl")
    # хРМцЧ╢ф┐ЭхнШ scalerя╝ИчФиф║О Logistic Regression хТМ SVMя╝Й
    joblib.dump(scaler, "scaler.pkl")
    print("цЙАцЬЙцибхЮЛхТМ scaler х╖▓ф┐ЭхнШуАВ")

# хжВцЮЬцЙАцЬЙцибхЮЛцИЦ scaler цЦЗф╗╢ф╕НхнШхЬия╝МхИЩшонч╗ГцЙАцЬЙцибхЮЛ
required_files = ["logistic_regression.pkl", "random_forest.pkl", "decision_tree.pkl", 
                  "gradient_boosting.pkl", "svm.pkl", "scaler.pkl"]
if not all(os.path.exists(f) for f in required_files):
    train_all_models()

# =============================================================================
# Streamlit щГич╜▓щГихИЖя╝Ъф╗Еф╜┐чФи Logistic Regression цибхЮЛш┐ЫшбМщвДц╡ЛхПКцЛТч╗ЭхОЯхЫахПНщжИ
# =============================================================================

# хКаш╜╜х╖▓ф┐ЭхнШчЪД Logistic Regression цибхЮЛхТМ scaler
logistic_regression_model = joblib.load("logistic_regression.pkl")
scaler = joblib.load("scaler.pkl")

# =============================================================================
# хдЪшпншиАч┐╗шпСхнЧхЕ╕я╝Их║ФчФичХМщЭвчЫ╕хЕ│я╝Й
# =============================================================================
translations = {
    "app_title": {
        "English": "ЁЯПж Credit Risk Prediction App",
        "ф╕нцЦЗ": "ЁЯПж ф┐бчФищгОщЩйщвДц╡Лх║ФчФи",
        "эХЬъ╡ньЦ┤": "ЁЯПж ьЛаьЪй ьЬДэЧШ ьШИь╕б ьХ▒",
        "рд╣рд┐рдВрджреА": "ЁЯПж рдХреНрд░реЗрдбрд┐рдЯ рдЬреЛрдЦрд┐рдо рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдРрдк",
        "╫в╫С╫и╫Щ╫к": "╫Р╫д╫Ь╫Щ╫з╫ж╫Щ╫Щ╫к ╫Ч╫Щ╫Ц╫Х╫Щ ╫б╫Щ╫Ы╫Х╫Я ╫Р╫й╫и╫Р╫Щ"
    },
    "app_description": {
        "English": "Enter applicant details to predict loan approval or rejection.",
        "ф╕нцЦЗ": "шп╖ш╛УхЕечФ│шп╖ф║║ф┐бцБпф╗ещвДц╡Лш┤╖цм╛цЙ╣хЗЖцИЦцЛТч╗ЭуАВ",
        "эХЬъ╡ньЦ┤": "ыМАь╢Ь ьК╣ьЭ╕ ыШРыКФ ъ▒░ьаИьЭД ьШИь╕бэХШъ╕░ ьЬДэХ┤ ьЛаь▓ньЮР ьД╕ы╢А ьаХы│┤ые╝ ьЮЕыаеэХШьД╕ьЪФ.",
        "рд╣рд┐рдВрджреА": "рдЛрдг рд╕реНрд╡реАрдХреГрддрд┐ рдпрд╛ рдЕрд╕реНрд╡реАрдХреГрддрд┐ рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрд╡реЗрджрдХ рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВред",
        "╫в╫С╫и╫Щ╫к": "╫Ф╫Ц╫Я ╫д╫и╫Ш╫Щ ╫Ю╫С╫з╫й ╫Ф╫Ф╫Ь╫Х╫Х╫Р╫Ф ╫Ы╫У╫Щ ╫Ь╫Ч╫Ц╫Х╫к ╫Р╫Э ╫Ф╫Ф╫Ь╫Х╫Х╫Р╫Ф ╫к╫Р╫Х╫й╫и ╫Р╫Х ╫к╫Щ╫У╫Ч╫Ф."
    },
    "sidebar_details": {
        "English": "Applicant Details",
        "ф╕нцЦЗ": "чФ│шп╖ф║║ф┐бцБп",
        "эХЬъ╡ньЦ┤": "ьЛаь▓ньЮР ьаХы│┤",
        "рд╣рд┐рдВрджреА": "рдЖрд╡реЗрджрдХ рд╡рд┐рд╡рд░рдг",
        "╫в╫С╫и╫Щ╫к": "╫д╫и╫Ш╫Щ ╫Ф╫Ю╫С╫з╫й"
    },
    "predict_button": {
        "English": "Predict Credit Risk",
        "ф╕нцЦЗ": "щвДц╡Лф┐бчФищгОщЩй",
        "эХЬъ╡ньЦ┤": "ьЛаьЪй ьЬДэЧШ ьШИь╕б",
        "рд╣рд┐рдВрджреА": "рдХреНрд░реЗрдбрд┐рдЯ рдЬреЛрдЦрд┐рдо рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░реЗрдВ",
        "╫в╫С╫и╫Щ╫к": "╫а╫С╫Р ╫б╫Щ╫Ы╫Х╫Я ╫Р╫й╫и╫Р╫Щ"
    },
    "loan_decision": {
        "English": "Loan Decision",
        "ф╕нцЦЗ": "ш┤╖цм╛хЖ│хоЪ",
        "эХЬъ╡ньЦ┤": "ыМАь╢Ь ъ▓░ьаХ",
        "рд╣рд┐рдВрджреА": "рдЛрдг рдирд┐рд░реНрдгрдп",
        "╫в╫С╫и╫Щ╫к": "╫Ф╫Ч╫Ь╫Ш╫к ╫Ф╫Ь╫Х╫Х╫Р╫Ф"
    },
    "approved": {
        "English": "тЬЕ Approved",
        "ф╕нцЦЗ": "тЬЕ цЙ╣хЗЖ",
        "эХЬъ╡ньЦ┤": "тЬЕ ьК╣ьЭ╕ыРи",
        "рд╣рд┐рдВрджреА": "тЬЕ рд╕реНрд╡реАрдХреГрдд",
        "╫в╫С╫и╫Щ╫к": "тЬЕ ╫Ю╫Р╫Х╫й╫и"
    },
    "rejected": {
        "English": "тЭМ Rejected",
        "ф╕нцЦЗ": "тЭМ цЛТч╗Э",
        "эХЬъ╡ньЦ┤": "тЭМ ъ▒░ьаИыРи",
        "рд╣рд┐рдВрджреА": "тЭМ рдЕрд╕реНрд╡реАрдХреГрдд",
        "╫в╫С╫и╫Щ╫к": "тЭМ ╫а╫У╫Ч╫Ф"
    },
    "rejection_reasons": {
        "English": "Reasons for Rejection:",
        "ф╕нцЦЗ": "цЛТч╗ЭхОЯхЫая╝Ъ",
        "эХЬъ╡ньЦ┤": "ъ▒░ьаИ ьВмьЬа:",
        "рд╣рд┐рдВрджреА": "рдЕрд╕реНрд╡реАрдХреГрддрд┐ рдХреЗ рдХрд╛рд░рдг:",
        "╫в╫С╫и╫Щ╫к": "╫б╫Щ╫С╫Х╫к ╫Ь╫У╫Ч╫Щ╫Щ╫Ф:"
    },
    "enter_value": {
        "English": "Enter value for",
        "ф╕нцЦЗ": "шп╖ш╛УхЕе",
        "эХЬъ╡ньЦ┤": "ъ░Т ьЮЕыае:",
        "рд╣рд┐рдВрджреА": "рдХреЗ рд▓рд┐рдП рдорд╛рди рджрд░реНрдЬ рдХрд░реЗрдВ",
        "╫в╫С╫и╫Щ╫к": "╫Ф╫Ц╫Я ╫в╫и╫Ъ ╫в╫С╫Х╫и"
    },
    # ф╗еф╕Лф╕║щТИхп╣ш┤бчМошп┤цШОчЪДхдЪшпншиАцибцЭ┐
    "reason_positive": {
        "English": "{} contributes positively with a value of {:.2f}, increasing the likelihood of approval.",
        "ф╕нцЦЗ": "{} хп╣цЙ╣хЗЖцЬЙцнгщЭвх╜▒хУНя╝Иш┤бчМохА╝я╝Ъ{:.2f}я╝Йя╝МцЬЙхКйф║Ош┤╖цм╛цЙ╣хЗЖуАВ",
        "эХЬъ╡ньЦ┤": "{} ыКФ ъ╕НьаХьаБьЬ╝ыбЬ ъ╕░ьЧмэХйыЛИыЛд (ъ╕░ьЧмъ░Т: {:.2f}), ьК╣ьЭ╕ ъ░АыКеьД▒ьЭД ыЖТьЮЕыЛИыЛд.",
        "рд╣рд┐рдВрджреА": "{} рд╕рдХрд╛рд░рд╛рддреНрдордХ рд░реВрдк рд╕реЗ рдпреЛрдЧрджрд╛рди рджреЗрддрд╛ рд╣реИ (рдпреЛрдЧрджрд╛рди: {:.2f}), рд╕реНрд╡реАрдХреГрддрд┐ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рдмрдврд╝рд╛рддрд╛ рд╣реИред",
        "╫в╫С╫и╫Щ╫к": "{} ╫к╫Х╫и╫Э ╫С╫Р╫Х╫д╫Я ╫Ч╫Щ╫Х╫С╫Щ ╫в╫Э ╫в╫и╫Ъ ╫й╫Ь {:.2f}, ╫Х╫Ю╫в╫Ь╫Ф ╫Р╫к ╫Ф╫б╫Щ╫Ы╫Х╫Щ ╫Ь╫Р╫Щ╫й╫Х╫и."
    },
    "reason_negative": {
        "English": "{} contributes negatively with a value of {:.2f}, reducing the likelihood of approval.",
        "ф╕нцЦЗ": "{} хп╣цЙ╣хЗЖцЬЙш┤ЯщЭвх╜▒хУНя╝Иш┤бчМохА╝я╝Ъ{:.2f}я╝Йя╝МщЩНф╜Ош┤╖цм╛цЙ╣хЗЖчЪДхПпшГ╜цАзуАВ",
        "эХЬъ╡ньЦ┤": "{} ыКФ ы╢АьаХьаБьЬ╝ыбЬ ъ╕░ьЧмэХйыЛИыЛд (ъ╕░ьЧмъ░Т: {:.2f}), ьК╣ьЭ╕ ъ░АыКеьД▒ьЭД ыВоь╢еыЛИыЛд.",
        "рд╣рд┐рдВрджреА": "{} рдирдХрд╛рд░рд╛рддреНрдордХ рд░реВрдк рд╕реЗ рдпреЛрдЧрджрд╛рди рджреЗрддрд╛ рд╣реИ (рдпреЛрдЧрджрд╛рди: {:.2f}), рд╕реНрд╡реАрдХреГрддрд┐ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рдХрдо рдХрд░рддрд╛ рд╣реИред",
        "╫в╫С╫и╫Щ╫к": "{} ╫к╫Х╫и╫Э ╫С╫Р╫Х╫д╫Я ╫й╫Ь╫Щ╫Ь╫Щ ╫в╫Э ╫в╫и╫Ъ ╫й╫Ь {:.2f}, ╫Х╫Ю╫д╫Ч╫Щ╫к ╫Р╫к ╫Ф╫б╫Щ╫Ы╫Х╫Щ ╫Ь╫Р╫Щ╫й╫Х╫и."
    },
    "reason_neutral": {
        "English": "{} has no significant influence (contribution: {:.2f}).",
        "ф╕нцЦЗ": "{} хп╣цЙ╣хЗЖц▓бцЬЙцШ╛шСЧх╜▒хУНя╝Иш┤бчМохА╝я╝Ъ{:.2f}я╝ЙуАВ",
        "эХЬъ╡ньЦ┤": "{} ыКФ ьЬаьЭШып╕эХЬ ьШБэЦеьЭД ып╕ь╣ШьзА ьХКьК╡ыЛИыЛд (ъ╕░ьЧмъ░Т: {:.2f}).",
        "рд╣рд┐рдВрджреА": "{} рдХрд╛ рдХреЛрдИ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдкреНрд░рднрд╛рд╡ рдирд╣реАрдВ рд╣реИ (рдпреЛрдЧрджрд╛рди: {:.2f})ред",
        "╫в╫С╫и╫Щ╫к": "{} ╫Р╫Щ╫а╫Х ╫Ю╫й╫д╫Щ╫в ╫С╫Р╫Х╫д╫Я ╫Ю╫й╫Ю╫в╫Х╫к╫Щ (╫к╫и╫Х╫Ю╫Ф: {:.2f})."
    }
}

# =============================================================================
# хПШщЗПхРНчз░ч┐╗шпСхнЧхЕ╕я╝Иfeature_translationsя╝Й
# =============================================================================
feature_translations = {
    "ExternalRiskEstimate": {
        "English": "External Risk Estimate",
        "ф╕нцЦЗ": "хдЦщГищгОщЩйшпДф╝░",
        "эХЬъ╡ньЦ┤": "ьЩ╕ы╢А ьЬДэЧШ эПЙъ░А",
        "рд╣рд┐рдВрджреА": "рдмрд╛рд╣рд░реА рдЬреЛрдЦрд┐рдо рдЕрдиреБрдорд╛рди",
        "╫в╫С╫и╫Щ╫к": "╫Ф╫в╫и╫Ы╫к ╫б╫Щ╫Ы╫Х╫Я ╫Ч╫Щ╫ж╫Х╫а╫Щ╫к"
    },
    "MSinceOldestTradeOpen": {
        "English": "Months Since Oldest Trade Open",
        "ф╕нцЦЗ": "цЬАцЧйф║дцШУх╝АцФ╛шЗ│ф╗КчЪДцЬИф╗╜цХ░",
        "эХЬъ╡ньЦ┤": "ь╡Ьь┤И ъ▒░ыЮШ ъ░ЬьЛЬ ьЭ┤эЫД ъ▓╜ъ│╝ ъ░ЬьЫФ",
        "рд╣рд┐рдВрджреА": "рд╕рдмрд╕реЗ рдкреБрд░рд╛рдиреА рдЯреНрд░реЗрдб рдЦреБрд▓рдиреЗ рдХреЗ рдмрд╛рдж рд╕реЗ рдорд╣реАрдиреЗ",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫Ю╫Р╫Ц ╫д╫к╫Щ╫Ч╫к ╫Ф╫в╫б╫з╫Ф ╫Ф╫Х╫Х╫к╫Щ╫з╫Ф ╫С╫Щ╫Х╫к╫и"
    },
    "MSinceMostRecentTradeOpen": {
        "English": "Months Since Most Recent Trade Open",
        "ф╕нцЦЗ": "цЬАш┐Сф║дцШУх╝АцФ╛шЗ│ф╗КчЪДцЬИф╗╜цХ░",
        "эХЬъ╡ньЦ┤": "ь╡Ьъ╖╝ ъ▒░ыЮШ ъ░ЬьЛЬ ьЭ┤эЫД ъ▓╜ъ│╝ ъ░ЬьЫФ",
        "рд╣рд┐рдВрджреА": "рд╣рд╛рд▓ рдХреА рдЯреНрд░реЗрдб рдЦреБрд▓рдиреЗ рдХреЗ рдмрд╛рдж рд╕реЗ рдорд╣реАрдиреЗ",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫Ю╫Р╫Ц ╫д╫к╫Щ╫Ч╫к ╫Ф╫в╫б╫з╫Ф ╫Ф╫Р╫Ч╫и╫Х╫а╫Ф"
    },
    "AverageMInFile": {
        "English": "Average Months in File",
        "ф╕нцЦЗ": "цЦЗф╗╢ф╕нчЪДх╣│хЭЗцЬИф╗╜цХ░",
        "эХЬъ╡ньЦ┤": "эММьЭ╝ ыВ┤ эПЙъ╖а ъ░ЬьЫФ ьИШ",
        "рд╣рд┐рдВрджреА": "рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рдФрд╕рдд рдорд╣реАрдиреЗ",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫Ю╫Х╫ж╫в ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫С╫к╫Щ╫з"
    },
    "NumSatisfactoryTrades": {
        "English": "Number of Satisfactory Trades",
        "ф╕нцЦЗ": "ц╗бцДПф║дцШУцХ░щЗП",
        "эХЬъ╡ньЦ┤": "ызМьб▒ ъ▒░ыЮШ ьИШ",
        "рд╣рд┐рдВрджреА": "рд╕рдВрддреЛрд╖рдЬрдирдХ рдЯреНрд░реЗрдб рдХреА рд╕рдВрдЦреНрдпрд╛",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫в╫б╫з╫Р╫Х╫к ╫Ю╫б╫д╫з╫Х╫к"
    },
    "NumTrades60Ever2DerogPubRec": {
        "English": "Number of Trades 60+ Ever",
        "ф╕нцЦЗ": "60+ф║дцШУцмбцХ░",
        "эХЬъ╡ньЦ┤": "60+ ъ▒░ыЮШ ьИШ",
        "рд╣рд┐рдВрджреА": "60+ рдЯреНрд░реЗрдб рдХреА рд╕рдВрдЦреНрдпрд╛",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫в╫б╫з╫Р╫Х╫к 60+ ╫Р╫Щ ╫д╫в╫Э"
    },
    "NumTrades90Ever2DerogPubRec": {
        "English": "Number of Trades 90+ Ever",
        "ф╕нцЦЗ": "90+ф║дцШУцмбцХ░",
        "эХЬъ╡ньЦ┤": "90+ ъ▒░ыЮШ ьИШ",
        "рд╣рд┐рдВрджреА": "90+ рдЯреНрд░реЗрдб рдХреА рд╕рдВрдЦреНрдпрд╛",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫в╫б╫з╫Р╫Х╫к 90+ ╫Р╫Щ ╫д╫в╫Э"
    },
    "PercentTradesNeverDelq": {
        "English": "Percent of Trades Never Delinquent",
        "ф╕нцЦЗ": "ф╗ОцЬкш┐Эч║жчЪДф║дцШУчЩ╛хИЖцпФ",
        "эХЬъ╡ньЦ┤": "ьЧ░ь▓┤ ъ╕░ыбЭ ьЧЖыКФ ъ▒░ыЮШ ы╣ДьЬи",
        "рд╣рд┐рдВрджреА": "рдХрднреА рдбрд┐рдлреЙрд▓реНрдЯ рди рд╣реБрдП рдЯреНрд░реЗрдб рдХрд╛ рдкреНрд░рддрд┐рд╢рдд",
        "╫в╫С╫и╫Щ╫к": "╫Р╫Ч╫Х╫Ц ╫Ф╫в╫б╫з╫Р╫Х╫к ╫й╫Ю╫в╫Х╫Ь╫Э ╫Ь╫Р ╫Ф╫Щ╫Х ╫С╫д╫Щ╫Т╫Х╫и"
    },
    "MSinceMostRecentDelq": {
        "English": "Months Since Most Recent Delinquency",
        "ф╕нцЦЗ": "цЬАш┐Сш┐Эч║жшЗ│ф╗КчЪДцЬИф╗╜цХ░",
        "эХЬъ╡ньЦ┤": "ь╡Ьъ╖╝ ьЧ░ь▓┤ ьЭ┤эЫД ъ▓╜ъ│╝ ъ░ЬьЫФ",
        "рд╣рд┐рдВрджреА": "рд╣рд╛рд▓ рд╣реА рдореЗрдВ рдбрд┐рдлреЙрд▓реНрдЯ рд╕реЗ рдмреАрддреЗ рдорд╣реАрдиреЗ",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫Ю╫Р╫Ц ╫Ф╫д╫Щ╫Т╫Х╫и ╫Ф╫Р╫Ч╫и╫Х╫Я"
    },
    "MaxDelq2PublicRecLast12M": {
        "English": "Max Delinquency in Last 12M",
        "ф╕нцЦЗ": "ш┐ЗхО╗12ф╕кцЬИхЖЕцЬАхдзш┐Эч║жцмбцХ░",
        "эХЬъ╡ньЦ┤": "ь╡Ьъ╖╝ 12ъ░ЬьЫФ ыВ┤ ь╡ЬыМА ьЧ░ь▓┤",
        "рд╣рд┐рдВрджреА": "рдкрд┐рдЫрд▓реЗ 12 рдорд╣реАрдиреЛрдВ рдореЗрдВ рдЕрдзрд┐рдХрддрдо рдбрд┐рдлреЙрд▓реНрдЯ",
        "╫в╫С╫и╫Щ╫к": "╫Ф╫д╫Щ╫Т╫Х╫и ╫Ф╫Ю╫и╫С╫Щ ╫С-12 ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫Ф╫Р╫Ч╫и╫Х╫а╫Щ╫Э"
    },
    "MaxDelqEver": {
        "English": "Max Delinquency Ever",
        "ф╕нцЦЗ": "хОЖхП▓цЬАхдзш┐Эч║жцмбцХ░",
        "эХЬъ╡ньЦ┤": "ьаДь▓┤ ъ╕░ъ░Д ь╡ЬыМА ьЧ░ь▓┤",
        "рд╣рд┐рдВрджреА": "рдЕрдм рддрдХ рдХрд╛ рдЕрдзрд┐рдХрддрдо рдбрд┐рдлреЙрд▓реНрдЯ",
        "╫в╫С╫и╫Щ╫к": "╫Ф╫д╫Щ╫Т╫Х╫и ╫Ф╫Ю╫и╫С╫Щ ╫Р╫Щ ╫д╫в╫Э"
    },
    "NumTotalTrades": {
        "English": "Number of Total Trades",
        "ф╕нцЦЗ": "ф║дцШУцА╗цХ░",
        "эХЬъ╡ньЦ┤": "ьаДь▓┤ ъ▒░ыЮШ ьИШ",
        "рд╣рд┐рдВрджреА": "рдХреБрд▓ рдЯреНрд░реЗрдб рдХреА рд╕рдВрдЦреНрдпрд╛",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ы╫Ь ╫Ф╫в╫б╫з╫Р╫Х╫к"
    },
    "NumTradesOpeninLast12M": {
        "English": "Number of Trades Open in Last 12M",
        "ф╕нцЦЗ": "ш┐ЗхО╗12ф╕кцЬИхЖЕх╝АхРпчЪДф║дцШУцХ░щЗП",
        "эХЬъ╡ньЦ┤": "ь╡Ьъ╖╝ 12ъ░ЬьЫФ ыВ┤ ъ░ЬьЛЬыРЬ ъ▒░ыЮШ ьИШ",
        "рд╣рд┐рдВрджреА": "рдкрд┐рдЫрд▓реЗ 12 рдорд╣реАрдиреЛрдВ рдореЗрдВ рдЦреБрд▓реА рдЯреНрд░реЗрдб рдХреА рд╕рдВрдЦреНрдпрд╛",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫в╫б╫з╫Р╫Х╫к ╫Ф╫д╫к╫Х╫Ч╫Х╫к ╫С-12 ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫Ф╫Р╫Ч╫и╫Х╫а╫Щ╫Э"
    },
    "PercentInstallTrades": {
        "English": "Percent Installment Trades",
        "ф╕нцЦЗ": "хИЖцЬЯф║дцШУчЩ╛хИЖцпФ",
        "эХЬъ╡ньЦ┤": "эХаы╢А ъ▒░ыЮШ ы╣ДьЬи",
        "рд╣рд┐рдВрджреА": "рдХрд┐рд╕реНрдд рдЯреНрд░реЗрдб рдХрд╛ рдкреНрд░рддрд┐рд╢рдд",
        "╫в╫С╫и╫Щ╫к": "╫Р╫Ч╫Х╫Ц ╫Ф╫в╫б╫з╫Р╫Х╫к ╫С╫к╫й╫Ь╫Х╫Ю╫Щ╫Э"
    },
    "MSinceMostRecentInqexcl7days": {
        "English": "Months Since Most Recent Inquiry (excl 7 days)",
        "ф╕нцЦЗ": "цЬАш┐СцЯешпвя╝ИцОТщЩд7хдйя╝ЙшЗ│ф╗КчЪДцЬИф╗╜цХ░",
        "эХЬъ╡ньЦ┤": "ь╡Ьъ╖╝ ым╕ьЭШ(7ьЭ╝ ьаЬьЩ╕) ьЭ┤эЫД ъ▓╜ъ│╝ ъ░ЬьЫФ",
        "рд╣рд┐рдВрджреА": "рд╣рд╛рд▓ рдХреА рдкреВрдЫрддрд╛рдЫ (7 рджрд┐рдиреЛрдВ рдХреЛ рдЫреЛрдбрд╝рдХрд░) рдХреЗ рдмрд╛рдж рд╕реЗ рдорд╣реАрдиреЗ",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫Ю╫Р╫Ц ╫Ф╫й╫Р╫Щ╫Ь╫к╫Ф ╫Ф╫Р╫Ч╫и╫Х╫а╫Ф (╫Ь╫Ь╫Р 7 ╫Щ╫Ю╫Щ╫Э)"
    },
    "NumInqLast6M": {
        "English": "Number of Inquiries Last 6M",
        "ф╕нцЦЗ": "ш┐ЗхО╗6ф╕кцЬИхЖЕцЯешпвцмбцХ░",
        "эХЬъ╡ньЦ┤": "ь╡Ьъ╖╝ 6ъ░ЬьЫФ ыВ┤ ым╕ьЭШ ьИШ",
        "рд╣рд┐рдВрджреА": "рдкрд┐рдЫрд▓реЗ 6 рдорд╣реАрдиреЛрдВ рдореЗрдВ рдкреВрдЫрддрд╛рдЫ рдХреА рд╕рдВрдЦреНрдпрд╛",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫й╫Р╫Щ╫Ь╫к╫Х╫к ╫С-6 ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫Ф╫Р╫Ч╫и╫Х╫а╫Щ╫Э"
    },
    "NumInqLast6Mexcl7days": {
        "English": "Number of Inquiries Last 6M (excl 7 days)",
        "ф╕нцЦЗ": "ш┐ЗхО╗6ф╕кцЬИхЖЕцЯешпвцмбцХ░я╝ИцОТщЩд7хдйя╝Й",
        "эХЬъ╡ньЦ┤": "ь╡Ьъ╖╝ 6ъ░ЬьЫФ ыВ┤ ым╕ьЭШ ьИШ (7ьЭ╝ ьаЬьЩ╕)",
        "рд╣рд┐рдВрджреА": "рдкрд┐рдЫрд▓реЗ 6 рдорд╣реАрдиреЛрдВ рдореЗрдВ рдкреВрдЫрддрд╛рдЫ рдХреА рд╕рдВрдЦреНрдпрд╛ (7 рджрд┐рдиреЛрдВ рдХреЛ рдЫреЛрдбрд╝рдХрд░)",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫й╫Р╫Щ╫Ь╫к╫Х╫к ╫С-6 ╫Ф╫Ч╫Х╫У╫й╫Щ╫Э ╫Ф╫Р╫Ч╫и╫Х╫а╫Щ╫Э (╫Ь╫Ь╫Р 7 ╫Щ╫Ю╫Щ╫Э)"
    },
    "NetFractionRevolvingBurden": {
        "English": "Net Fraction Revolving Burden",
        "ф╕нцЦЗ": "х╛кчОпш┤ЯхА║хЗАцпФф╛Л",
        "эХЬъ╡ньЦ┤": "ьИЬэЩШ ы╢Аь▒Д ы╣ДьЬи",
        "рд╣рд┐рдВрджреА": "рдШреВрд░реНрдгрди рдЛрдг рдХрд╛ рд╢реБрджреНрдз рдЕрдиреБрдкрд╛рдд",
        "╫в╫С╫и╫Щ╫к": "╫Ч╫Ь╫з ╫а╫Ш╫Х ╫й╫Ь ╫а╫Ш╫Ь ╫Ю╫Ч╫Ц╫Х╫и╫Щ"
    },
    "NetFractionInstallBurden": {
        "English": "Net Fraction Install Burden",
        "ф╕нцЦЗ": "хИЖцЬЯш┤ЯхА║хЗАцпФф╛Л",
        "эХЬъ╡ньЦ┤": "эХаы╢А ы╢Аь▒Д ы╣ДьЬи",
        "рд╣рд┐рдВрджреА": "рдХрд┐рд╕реНрдд рдЛрдг рдХрд╛ рд╢реБрджреНрдз рдЕрдиреБрдкрд╛рдд",
        "╫в╫С╫и╫Щ╫к": "╫Ч╫Ь╫з ╫а╫Ш╫Х ╫й╫Ь ╫а╫Ш╫Ь ╫С╫к╫й╫Ь╫Х╫Ю╫Щ╫Э"
    },
    "NumRevolvingTradesWBalance": {
        "English": "Number of Revolving Trades With Balance",
        "ф╕нцЦЗ": "цЬЙф╜ЩщвЭчЪДх╛кчОпф║дцШУцХ░щЗП",
        "эХЬъ╡ньЦ┤": "ьЮФьХбьЭ┤ ьЮИыКФ ьИЬэЩШ ъ▒░ыЮШ ьИШ",
        "рд╣рд┐рдВрджреА": "рдмреИрд▓реЗрдВрд╕ рд╡рд╛рд▓реЗ рдШреВрд░реНрдгрди рдЯреНрд░реЗрдб рдХреА рд╕рдВрдЦреНрдпрд╛",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫в╫б╫з╫Р╫Х╫к ╫Ф╫Ю╫Ч╫Ц╫Х╫и╫Щ╫Х╫к ╫в╫Э ╫Щ╫к╫и╫Ф"
    },
    "NumInstallTradesWBalance": {
        "English": "Number of Install Trades With Balance",
        "ф╕нцЦЗ": "цЬЙф╜ЩщвЭчЪДхИЖцЬЯф║дцШУцХ░щЗП",
        "эХЬъ╡ньЦ┤": "ьЮФьХбьЭ┤ ьЮИыКФ эХаы╢А ъ▒░ыЮШ ьИШ",
        "рд╣рд┐рдВрджреА": "рдмреИрд▓реЗрдВрд╕ рд╡рд╛рд▓реЗ рдХрд┐рд╕реНрдд рдЯреНрд░реЗрдб рдХреА рд╕рдВрдЦреНрдпрд╛",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫в╫б╫з╫Р╫Х╫к ╫Ф╫к╫й╫Ь╫Х╫Ю╫Щ╫Х╫к ╫в╫Э ╫Щ╫к╫и╫Ф"
    },
    "NumBank2NatlTradesWHighUtilization": {
        "English": "Number of Bank/National Trades High Utilization",
        "ф╕нцЦЗ": "щУ╢шбМ/хЕихЫ╜щлШхИйчФичОЗф║дцШУцХ░щЗП",
        "эХЬъ╡ньЦ┤": "ьЭАэЦЙ/ъ╡нъ░А ъ▒░ыЮШ ьдС ыЖТьЭА ьЭ┤ьЪйыеа ъ▒░ыЮШ ьИШ",
        "рд╣рд┐рдВрджреА": "рдмреИрдВрдХ/рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЯреНрд░реЗрдб рдЬрд┐рдирдХреА рдЙрдЪреНрдЪ рдЙрдкрдпреЛрдЧ рджрд░ рд╣реИ",
        "╫в╫С╫и╫Щ╫к": "╫Ю╫б╫д╫и ╫Ф╫в╫б╫з╫Р╫Х╫к ╫Ф╫С╫а╫з╫Р╫Щ╫Х╫к/╫Ь╫Р╫Х╫Ю╫Щ╫Х╫к ╫в╫Э ╫а╫Щ╫ж╫Х╫Ь ╫Т╫С╫Х╫Ф"
    },
    "PercentTradesWBalance": {
        "English": "Percent Trades With Balance",
        "ф╕нцЦЗ": "цЬЙф╜ЩщвЭчЪДф║дцШУчЩ╛хИЖцпФ",
        "эХЬъ╡ньЦ┤": "ьЮФьХб ьЮИыКФ ъ▒░ыЮШ ы╣ДьЬи",
        "рд╣рд┐рдВрджреА": "рдмреИрд▓реЗрдВрд╕ рд╡рд╛рд▓реЗ рдЯреНрд░реЗрдб рдХрд╛ рдкреНрд░рддрд┐рд╢рдд",
        "╫в╫С╫и╫Щ╫к": "╫Р╫Ч╫Х╫Ц ╫Ф╫в╫б╫з╫Р╫Х╫к ╫в╫Э ╫Щ╫к╫и╫Ф"
    }
}

# =============================================================================
# шпншиАщАЙцЛйя╝ИхвЮхКа ╫в╫С╫и╫Щ╫кя╝Й
# =============================================================================
language = st.sidebar.selectbox("Language / шпншиА / ьЦ╕ьЦ┤ / рднрд╛рд╖рд╛ / Language (╫в╫С╫и╫Щ╫к)", 
                                options=["English", "ф╕нцЦЗ", "эХЬъ╡ньЦ┤", "рд╣рд┐рдВрджреА", "╫в╫С╫и╫Щ╫к"])

# =============================================================================
# х║ФчФицаЗщвШхТМцППш┐░
# =============================================================================
st.title(translations["app_title"][language])
st.write(translations["app_description"][language])

# =============================================================================
# цЙЛхКиш╛УхЕехРДщб╣чФ│шп╖ф║║хПВцХ░я╝Иф╜┐чФи number_input ч╗Дф╗╢я╝МхИйчФи feature_translations цШ╛чд║цЬмхЬ░хМЦхРНчз░я╝Й
# =============================================================================
st.sidebar.header(translations["sidebar_details"][language])
def localized_input(key, min_val, max_val, value, step):
    """чФЯцИРх╕жцЬЙцЬмхЬ░хМЦхПШщЗПхРНчз░чЪДш╛УхЕеч╗Дф╗╢"""
    label = f"{translations['enter_value'][language]} {feature_translations[key][language]}"
    return st.sidebar.number_input(label=label, min_value=min_val, max_value=max_val, value=value, step=step)

external_risk = localized_input("ExternalRiskEstimate", 0, 100, 50, 1)
msince_oldest_trade = localized_input("MSinceOldestTradeOpen", 0, 500, 100, 1)
msince_most_recent_trade = localized_input("MSinceMostRecentTradeOpen", 0, 100, 10, 1)
average_m_in_file = localized_input("AverageMInFile", 0, 200, 50, 1)
num_satisfactory_trades = localized_input("NumSatisfactoryTrades", 0, 50, 15, 1)
num_trades_60_ever = localized_input("NumTrades60Ever2DerogPubRec", 0, 20, 5, 1)
num_trades_90_ever = localized_input("NumTrades90Ever2DerogPubRec", 0, 20, 5, 1)
percent_trades_never_delq = localized_input("PercentTradesNeverDelq", 0, 100, 80, 1)
msince_most_recent_delq = localized_input("MSinceMostRecentDelq", 0, 100, 10, 1)
max_delq_12m = localized_input("MaxDelq2PublicRecLast12M", 0, 10, 5, 1)
max_delq_ever = localized_input("MaxDelqEver", 0, 10, 5, 1)
num_total_trades = localized_input("NumTotalTrades", 0, 50, 10, 1)
num_trades_open_12m = localized_input("NumTradesOpeninLast12M", 0, 20, 5, 1)
percent_install_trades = localized_input("PercentInstallTrades", 0, 100, 50, 1)
msince_most_recent_inq = localized_input("MSinceMostRecentInqexcl7days", 0, 100, 10, 1)
num_inq_last_6m = localized_input("NumInqLast6M", 0, 20, 2, 1)
num_inq_last_6m_excl7 = localized_input("NumInqLast6Mexcl7days", 0, 20, 2, 1)
net_fraction_revolving_burden = localized_input("NetFractionRevolvingBurden", 0, 100, 50, 1)
net_fraction_install_burden = localized_input("NetFractionInstallBurden", 0, 100, 50, 1)
num_revolving_trades_balance = localized_input("NumRevolvingTradesWBalance", 0, 20, 5, 1)
num_install_trades_balance = localized_input("NumInstallTradesWBalance", 0, 20, 5, 1)
num_bank_natl_trades_high_util = localized_input("NumBank2NatlTradesWHighUtilization", 0, 20, 5, 1)
percent_trades_balance = localized_input("PercentTradesWBalance", 0, 100, 50, 1)

# =============================================================================
# хоЪф╣ЙхЯ║ф║О Logistic Regression цибхЮЛш┤бчМошобчоЧчЪДцЛТч╗ЭхОЯхЫахПНщжИхЗ╜цХ░
# хп╣цпПф╕кхПШщЗПщГ╜цПРф╛Ышпжч╗ЖхОЯхЫашп┤цШОя╝Иф╜┐чФицЬмхЬ░хМЦхПШщЗПхРНчз░я╝Й
# =============================================================================
def get_logistic_rejection_reasons(input_data, lang):
    # цаЗхЗЖхМЦш╛УхЕецХ░цНо
    input_scaled = scaler.transform(input_data)
    # шобчоЧхРДчЙ╣х╛Бш┤бчМоя╝Ъш┤бчМо = цаЗхЗЖхМЦхА╝ * цибхЮЛч│╗цХ░
    contributions = input_scaled[0] * logistic_regression_model.coef_[0]
    # цЮДх╗║ {чЙ╣х╛БхРН: ш┤бчМохА╝} хнЧхЕ╕
    feature_contribs = {feature: contrib for feature, contrib in zip(scaler.feature_names_in_, contributions)}
    
    reasons = []
    # щБНхОЖцЙАцЬЙхПШщЗПя╝МчФЯцИРхп╣х║ФхОЯхЫашп┤цШО
    for feature, contrib in feature_contribs.items():
        # хПЦхп╣х║ФшпншиАчЪДхПШщЗПхРНчз░
        localized_name = feature_translations[feature][lang]
        # ца╣цНош┤бчМохА╝хИдцЦншп┤цШОч▒╗хЮЛ
        if abs(contrib) < 0.05:
            reason = translations["reason_neutral"][lang].format(localized_name, contrib)
        elif contrib < 0:
            reason = translations["reason_negative"][lang].format(localized_name, contrib)
        else:
            reason = translations["reason_positive"][lang].format(localized_name, contrib)
        reasons.append(reason)
    return reasons

# =============================================================================
# щвДц╡ЛхЗ╜цХ░я╝Иф╗Еф╜┐чФи Logistic Regression цибхЮЛя╝Й
# =============================================================================
def make_prediction():
    st.session_state["button_clicked"] = True  # цЫ┤цЦ░чК╢цАБ

    # цЮДщАаш╛УхЕецХ░цНоя╝МхнЧцо╡хРНчз░щб╗ф╕Ошонч╗ГцЧ╢ф╕АшЗ┤
    input_data = pd.DataFrame({
        "ExternalRiskEstimate": [external_risk],
        "MSinceOldestTradeOpen": [msince_oldest_trade],
        "MSinceMostRecentTradeOpen": [msince_most_recent_trade],
        "AverageMInFile": [average_m_in_file],
        "NumSatisfactoryTrades": [num_satisfactory_trades],
        "NumTrades60Ever2DerogPubRec": [num_trades_60_ever],
        "NumTrades90Ever2DerogPubRec": [num_trades_90_ever],
        "PercentTradesNeverDelq": [percent_trades_never_delq],
        "MSinceMostRecentDelq": [msince_most_recent_delq],
        "MaxDelq2PublicRecLast12M": [max_delq_12m],
        "MaxDelqEver": [max_delq_ever],
        "NumTotalTrades": [num_total_trades],
        "NumTradesOpeninLast12M": [num_trades_open_12m],
        "PercentInstallTrades": [percent_install_trades],
        "MSinceMostRecentInqexcl7days": [msince_most_recent_inq],
        "NumInqLast6M": [num_inq_last_6m],
        "NumInqLast6Mexcl7days": [num_inq_last_6m_excl7],
        "NetFractionRevolvingBurden": [net_fraction_revolving_burden],
        "NetFractionInstallBurden": [net_fraction_install_burden],
        "NumRevolvingTradesWBalance": [num_revolving_trades_balance],
        "NumInstallTradesWBalance": [num_install_trades_balance],
        "NumBank2NatlTradesWHighUtilization": [num_bank_natl_trades_high_util],
        "PercentTradesWBalance": [percent_trades_balance]
    })
    
    # чбоф┐ЭчЙ╣х╛Бщб║х║Пф╕Ошонч╗ГцЧ╢ф╕АшЗ┤
    input_data = input_data[scaler.feature_names_in_]
    
    # хп╣ш╛УхЕецХ░цНош┐ЫшбМцаЗхЗЖхМЦя╝ИхЫаф╕║цибхЮЛшонч╗ГцЧ╢ф╜┐чФиф║ЖцаЗхЗЖхМЦцХ░цНоя╝Й
    input_scaled = scaler.transform(input_data)
    
    # ш┐ЫшбМщвДц╡Л
    prediction = logistic_regression_model.predict(input_scaled)[0]
    st.session_state["prediction"] = prediction
    
    # хжВцЮЬщвДц╡Лф╕║цЛТч╗Эя╝И0я╝Йя╝МшобчоЧцпПф╕кхПШщЗПчЪДш┤бчМох╣╢ч╗ЩхЗ║шпжч╗ЖхОЯхЫа
    if prediction == 0:
        reasons = get_logistic_rejection_reasons(input_data, language)
        st.session_state["reasons"] = reasons
    else:
        st.session_state["reasons"] = []

# =============================================================================
# хИЭхзЛхМЦчК╢цАБх╣╢х▒Хчд║щвДц╡ЛцМЙщТоф╕Оч╗УцЮЬ
# =============================================================================
st.session_state.setdefault("prediction", None)
st.session_state.setdefault("button_clicked", False)
st.session_state.setdefault("reasons", [])

if st.button(translations["predict_button"][language]):
    make_prediction()

if st.session_state["button_clicked"]:
    if st.session_state["prediction"] is not None:
        if st.session_state["prediction"] == 1:
            result = translations["approved"][language]
            st.write(f"### {translations['loan_decision'][language]}: {result}")
        else:
            result = translations["rejected"][language]
            st.write(f"### {translations['loan_decision'][language]}: {result}")
            if st.session_state["reasons"]:
                st.write(f"**{translations['rejection_reasons'][language]}**")
                for reason in st.session_state["reasons"]:
                    st.write(f"- {reason}")
            else:
                st.write("No specific rejection reasons provided.")
    else:
        st.warning("тЪая╕П " + translations["predict_button"][language] + " to make a prediction.")
